from typing import Protocol, Sequence, TypeVar, overload,Optional
from ...backend import TensorLike

class ParabolicPDEDataProtocol(Protocol):
    def geo_dimension(self) -> int: ...
    def domain(self) -> Sequence[float]: ...
    @overload
    def diffusion_coef(self, p: Optional[TensorLike]) -> TensorLike: ...
    @overload
    def diffusion_coef(self) -> TensorLike: ...
    def diffusion_coef_inv(self, p: Optional[TensorLike] = None) -> TensorLike: ...
    @overload
    def convection_coef(self, p: TensorLike) -> TensorLike: ...
    @overload
    def convection_coef(self) -> TensorLike: ...
    @overload
    def reaction_coef(self, p: TensorLike) -> TensorLike: ...
    @overload
    def reaction_coef(self) -> TensorLike: ...
    def duration(self) -> Sequence[float]: ...
    def init_solution(self, p: TensorLike) -> TensorLike: ...
    def solution(self, p: TensorLike, t: float) -> TensorLike: ...
    def gradient(self, p: TensorLike, t: float) -> TensorLike: ...
    def source(self, p: TensorLike, t: float) -> TensorLike: ...
    def dirichlet(self, p: TensorLike, t:float) -> TensorLike: ...
    def is_dirichlet_boundary(self, p: TensorLike) -> TensorLike: ...

ParabolicPDEDataT = TypeVar('ParabolicPDEDataT', bound=ParabolicPDEDataProtocol)


DATA_TABLE = {
    # example name: (file_name, class_name)
    "sinexp": ("sin_exp_data_1d", "SinExpData1D"),
    "sinsinexp": ("sin_sin_exp_data_2d", "SinSinExpData2D"),

}


