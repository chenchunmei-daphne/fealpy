from typing import Protocol, Sequence, TypeVar, overload
from ...backend import TensorLike

class HyperbolicPDEDataProtocol(Protocol):
    def geo_dimension(self) -> int: ...
    def domain(self) -> Sequence[float]: ...
    def duration(self) -> Sequence[float]: ...
    @overload
    def convection_coef(self, p: TensorLike) -> TensorLike: ...
    @overload
    def convection_coef(self) -> TensorLike: ...
    def init_solution(self, p: TensorLike) -> TensorLike: ...
    def solution(self, p: TensorLike, t: float) -> TensorLike: ...
    def gradient(self, p: TensorLike, t: float) -> TensorLike: ...
    def source(self, p: TensorLike, t: float) -> TensorLike: ...
    def dirichlet(self, p: TensorLike, t:float) -> TensorLike: ...
    def is_dirichlet_boundary(self, p: TensorLike) -> TensorLike: ...

PDEDataT = TypeVar('HyperbolicPDEDataT', bound=HyperbolicPDEDataProtocol)


DATA_TABLE = {
    # example name: (file_name, class_name)
    "piecewise": ("piecewise_data_1d", "PiecewiseData1D"),
    "sinsincos": ("sin_sin_cos_data_2d", "SinSinCosData2D"),
}
